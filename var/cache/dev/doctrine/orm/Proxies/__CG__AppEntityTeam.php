<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Team extends \App\Entity\Team implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'logoFilename', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'bannerFilename', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'monoplaceFilename', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'teamLogo', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'teamBanner', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'teamMonoplace', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'country', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'pilotes', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Point'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'logoFilename', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'bannerFilename', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'monoplaceFilename', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'teamLogo', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'teamBanner', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'teamMonoplace', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'country', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'pilotes', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Point'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Team $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogoFilename(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogoFilename', []);

        return parent::getLogoFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogoFilename(?string $logoFilename): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogoFilename', [$logoFilename]);

        return parent::setLogoFilename($logoFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getBannerFilename(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBannerFilename', []);

        return parent::getBannerFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setBannerFilename(?string $bannerFilename): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBannerFilename', [$bannerFilename]);

        return parent::setBannerFilename($bannerFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getMonoplaceFilename(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonoplaceFilename', []);

        return parent::getMonoplaceFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setMonoplaceFilename(?string $monoplaceFilename): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMonoplaceFilename', [$monoplaceFilename]);

        return parent::setMonoplaceFilename($monoplaceFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamLogo(): ?\Symfony\Component\HttpFoundation\File\File
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamLogo', []);

        return parent::getTeamLogo();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamLogo(?\Symfony\Component\HttpFoundation\File\File $teamLogo): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamLogo', [$teamLogo]);

        return parent::setTeamLogo($teamLogo);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamBanner(): ?\Symfony\Component\HttpFoundation\File\File
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamBanner', []);

        return parent::getTeamBanner();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamBanner(?\Symfony\Component\HttpFoundation\File\File $teamBanner): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamBanner', [$teamBanner]);

        return parent::setTeamBanner($teamBanner);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamMonoplace(): ?\Symfony\Component\HttpFoundation\File\File
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamMonoplace', []);

        return parent::getTeamMonoplace();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamMonoplace(?\Symfony\Component\HttpFoundation\File\File $teamMonoplace): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamMonoplace', [$teamMonoplace]);

        return parent::setTeamMonoplace($teamMonoplace);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTimeInterface $updatedAt): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry(): ?\App\Entity\Country
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry(?\App\Entity\Country $country): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getPilotes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPilotes', []);

        return parent::getPilotes();
    }

    /**
     * {@inheritDoc}
     */
    public function addPilote(\App\Entity\Pilote $pilote): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPilote', [$pilote]);

        return parent::addPilote($pilote);
    }

    /**
     * {@inheritDoc}
     */
    public function removePilote(\App\Entity\Pilote $pilote): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePilote', [$pilote]);

        return parent::removePilote($pilote);
    }

    /**
     * {@inheritDoc}
     */
    public function getPoint(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoint', []);

        return parent::getPoint();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoint(?int $Point): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoint', [$Point]);

        return parent::setPoint($Point);
    }

}
